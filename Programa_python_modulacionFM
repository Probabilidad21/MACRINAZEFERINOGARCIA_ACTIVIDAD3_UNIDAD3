#BIBLIOTECAS ESCOGIDAS PARA EL PROGRAMA
import matplotlib.pyplot as plt # Importa libreria de matematicas y abreviar cada comando
import numpy as np # Importa libreria de numeros de python con un nombre mas 
import scipy.special as sp # Biblioteca para la creacion de graficos con la ayuda de listas
import pylab as pl # Importa la libreria de pylab con un nombre mas corto
from math import pi # Trae a el numero pi de la libreria de matematicas 
from math import log10 # Trae al comando de logaritmo en base de 10 de la libreria de math
plt.close ("all")

# VARIABLES INGRESADAS POR EL USUARIO
# Float, admite decimales (los decimales con punto, no con coma en python)

Vm=float(input("ingrese el valor de amplitud de la moduladora -->")) # Pide el valor de la amplitud de la moduladora
Fm=int(input("ingrese el valor de frecuencia de la moduladora -->")) # Pide la frecuencia de la moduladora
Vc=float(input("ingrese el valor de amplitud de la portadora -->")) # Ingresar el valor de amplitud de la portadora
Fc=int(input("Ingrese el valor de frecuencia de la portadora -->")) # Ingresar el valor de la frecuencia de la portadora
kf=float(input("Ingrese el factor de sensibilidad de frecuencia -->")) # Ingresar el valor de sensibilidad de la frecuencia
n=float(input("Ingrese el numero de periodos -->"))
print()

# VARIABLES QUE USAREMOS A LO LARGO DEL PROGRAMA

z = 50 # Impedancia caracteristica de la portadora
deltaf=kf*Vm # Desviacion de frecuencia
beta=deltaf/Fm # Indice de modulacion FM


Fs=50000 # Frecuencia de muestreo establecida para el programa para saber cuantos datos tomará
X=0 # Se inicializan las variables a trabar en 0
n0=[]# Vector vacio para ingresar los datos resultantes
bessel=[]# Vector vacio para ingresar los datos resultantes
f=np.arange(0,10,1)# Vector con el que empezaremos a trabajar


# ECUACIONES PARA HALLAR BESSEL
for i in range (0,len(f)): # Realizar el calculo para cada valor del venctor f
   x = round(sp.jv(i,beta),2)# Funcion bessel incluida en la libreria, redondear el resultado a decimal
   bessel.append(x)# Llenar el vector bs antes declarado con los resultado de x anterior
   
n_positivos=bessel[1:11]; # Componentes positivos de los componentes besel
n_negativos=np.flip(n_positivos);# Cambiar posiciones dentro del vector, negativos de bessel
n0.append(bessel[0]);# Definir el vector central, es decir, posicion 0 del vector

jn=np.concatenate((n_negativos,n0,n_positivos)) # Unir los vectores designados previamente

nB=4 # Numero n presentes en bessel
BWb=2*Fm*nB  # Ancho de banda por bessel
BWc=2*(deltaf*Vm) # Ancho de banda por carson

#VALORES PARA LAS FRECUENCIAS
f_ns=[] # Definiciones de vectores vacios
f_ps=[] # Definiciones de vectores vacios
F0=[] # Definiciones de vectores vacios
F0.append(Fc) # Fijar en el vector F0 la Fc coni posicion central

for f_inicial in range(0,len(f)): # Realizar el calculo para cada valor del vector f
    if f_inicial==0: # Creacion de un condicional para las frecuencias negativas
        f_1 = Fc-Fm;
        f_inicial=f_1;
    else:
        f_1=f_1-Fm;
        f_inicial=f_1;
        
    f_ns.append(f_inicial); # Llenar el vector con los resultados anteriores
finv_ns=np.flip(f_ns); # Cambiar las posiciones dentro del vector

for f_final in range (0,len(f)): # Para los vectores del vector f
    if f_final==0: # Condicional para las frecuencias positivas
        f_1=Fc+Fm;
        f_final = f_1;
    else:
        f_1=f_1+Fm;
        f_final = f_1;
        
    f_ps.append(f_final); # Llenar el vector de resultado anteriores
finv_ps=np.flip(f_ps); # Cambiar las posiciones dentro del vector
Fn = np.concatenate ((finv_ns,F0,f_ps)) # Unir componentes de frecuencias


t=np.arange(0,n*1/Fm,1/Fs)

#HALLAR Vc*Jn
f_VcJn=[] # Definir un vector inicial vacio
VcJn=0  # Inicializacion en cero
VcJn=np.round(abs((jn*Vc)/(np.sqrt(2))),2) # Multiplicar jn*Vc aplicando valor absoluto
f_VcJn.append(VcJn) # Llenar el vector con el calculo anterior

# HALLAR VALORES EN dB DE Jn*Vc
f_VndB=[] # Definir vector inicial vacio
VndB=0 # Inicializacion en cero
VndB=np.round(abs((20*np.log10(VcJn))),2) #operación
f_VndB.append(VndB) #con esta variable llenamos el vector

# HALLAR POTENCIAS EN WATTS (W)
f_PnW=[] # Definir vector inicial vacio 
PnW=0 # Inicializacion en cero
PnW=abs(((jn*Vc)**2)/100) # Operamos de acuerdo a la formula
f_PnW.append(PnW) # Llenar el vector con el calculo anterior


# HALLAR POTENCIA EN dBm
f_PndBm=[] # Definir vector inicial vacio
PndBm=0 # Inicializacion en cero
PndBm=np.round(abs((10*np.log10(PnW*1000))),2) # En esta operacion calculamos las potencias en dBm
f_PndBm.append(PndBm) # Llenar el vector con el calculo anterior


# CALCULO DE ECUACIONES PRESENTES EN EL PROGRAMA DE MODULACION
Vportadora= Vc*np.cos(2*pi*Fc*t); # Calculo señal portadora
Vmoduladora=Vm*np.sin(2*pi*Fm*t); # Calulo señal moduladora
Vfm=Vc*np.cos(2*pi*Fc*t+beta*np.sin(2*pi*Fm*t)); # Calculo modulacion FM


#FOMULA RESULTANTE
print("RESULTADOS MODULACION FM")
print()
print("{:^10}{:^10}{:^10}{:^10}".format("∆f","6","BWb","BWc"))
print("{:^10}{:^10}{:^10}{:^10}".format(deltaf,beta,BWb,BWc))
print()
print("{:^10}{:^9}{:^9}{:^9}{:^9}".format("Jn","Fn","Vc*Jn","Vn(dB)","Vn(dBm)", "Vn(dBm)"))
for formatted in map("{:^10}{:^10}{:^9}{:^10}{:^10}".format,jn,Fn,VcJn,VndB,PndBm):
    print(formatted)
print()
print("LA ECUACION PORTADORA ES:")
print("Vc(t)=",Vc,"cos(2π",Fc,"t)")
print()
print("LA ECUACION MODULADORA ES:")
print("Vm(t)=",Vm,"sen(2π",Fm,"t)")
print()
print ("LA ECUACION GENERAL PARA FM ES:")
print("Vfm(t)=",Vc,"cos[2π",Fc,"t + ",beta, "sen(2π",Fm,"t)[]")
print()

# GRAFICAS RESULTANTES
#PORTADORA
fig=plt.figure() #definir el nombre de la figura
fig,plt.subplot(1,1,1)
plt.plot(t,Vportadora,color="blue",linewidth=0.8)
plt.title("señal portadora")
plt.xlabel("tiempo");
plt.ylabel("amplitud");
plt.grid(True)
#MODULADORA
fig1=plt.figure()
fig1,plt.subplot(1,1,1)
plt.plot(t,Vmoduladora,color="black",linewidth=0.8)
plt.title("señal moduladora")
plt.xlabel("tiempo");
plt.ylabel("amplitud");
plt.grid(True)
#MODULACION DE FRECUENCIA        
fig2=plt.figure()
fig2,plt.subplot(1,1,1)
plt.plot(t,Vfm,color="red",linewidth=0.8)
plt.title("modulacion de frecuencia")
plt.xlabel("tiempo");
plt.ylabel("amplitud");
